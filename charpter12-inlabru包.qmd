# inlabru包

```{r}
#| warning: false
#| echo: false
source('scripts/utils.R')
library(gstat)
library(sp)
```

##  空间建模的挑战
空间建模是统计学和生态学研究中的重要领域，许多自然过程（如物种分布、环境变化）都发生在空间维度中。随着传感器技术、遥感技术和地理信息系统（GIS）的发展，研究人员能够获取到前所未有的高分辨率、大规模空间数据集。这些数据集通常具有复杂的空间结构和高维特性，例如非均匀分布、空间自相关以及多尺度效应。然而，当前的统计方法在处理这些复杂数据时常常面临双重困境：一方面，方法论的复杂性使得非专业用户难以理解和应用；另一方面，现有文献通常针对专业统计学家，假设条件过于理想化，与实际应用场景脱节。这导致许多空间分析方法在实际问题中难以推广，尤其是在生态学、环境科学等领域。因此，开发简单易用且计算高效的工具，成为空间建模领域亟待解决的问题。

### inlabru的诞生与目标
为应对空间建模的复杂性和可访问性挑战，inlabru软件包应运而生。作为R-INLA的扩展和用户友好封装，inlabru旨在通过简化的语法和直观的接口，使集成嵌套拉普拉斯近似（INLA）方法更易于被非统计专业人士使用。inlabru特别针对生态调查数据中的贝叶斯空间建模需求，提供了强大的工具集，帮助用户快速构建和拟合复杂的空间和时空模型。它的设计目标是降低技术门槛，同时保留INLA的计算效率和灵活性，使研究人员能够专注于科学问题而非复杂的统计实现。

### inlabru的核心优势
inlabru的核心优势在于其高效的贝叶斯推断能力，尤其在拟合复杂空间模型时表现卓越。传统的马尔可夫链蒙特卡洛（MCMC）方法在处理高维空间数据时往往计算成本高昂，甚至在某些情况下运行时间长到不切实际。相比之下，INLA通过近似方法大幅提高了计算速度，而inlabru进一步优化了用户体验，通过以下特性简化模型构建：简化模型组件指定：通过直观的语法，降低复杂潜在模型的定义难度。支持多观测模型：便于链接多个观测数据集，提升模型的灵活性。扩展非线性预测器：支持温和但非平凡的非线性关系，丰富模型表达能力。无缝集成R-INLA：在不重写底层代码的情况下扩展功能。
模块化设计：确保简单任务易于实现，复杂任务可行，且各模块之间高度互操作。
此外，inlabru支持多种空间数据类型，包括点过程数据、计数数据、地理参考数据以及距离抽样数据，使其在生态学、环境监测等领域具有广泛应用前景。

## 空间数据类型及其处理
空间建模的第一步是理解和处理不同类型的空间数据。根据数据的空间结构和观测方式，可将其分为连续空间数据和离散空间数据两大类。这些数据类型在生态学和环境科学中有着不同的应用场景，正确识别和处理它们对模型的准确性至关重要。

### 连续空间数据
连续空间数据描述了在空间中连续变化的现象，主要包括以下两种类型：地理统计数据：此类数据通常涉及连续的空间变量，例如土壤养分浓度、海洋盐度或空气污染物浓度。观测通常在研究者选定的固定位置进行，响应变量是这些位置的测量值。地理统计数据的分析需要考虑空间自相关，通常通过协方差函数或变差函数建模。
空间点数据：空间点数据记录空间中特定对象的位置，例如森林中树木的坐标或野生动物种群的分布。响应变量是点的二维（或三维）坐标，可能还包括附加属性（如物种、年龄），这些属性被称为“标记”。与地理统计数据不同，点数据的核心特征是点的位置本身具有信息量，这使得点过程模型成为分析此类数据的首选方法。

### 离散空间数据
离散空间数据通常基于空间网格或区域划分，常见形式包括：空间网格数据：这类数据以网格单元为基础，例如统计某个区域内的物种数量或降雨量。每个网格单元的响应变量是该单元的测量值，例如计数或平均值。网格数据的分析需要考虑网格分辨率对结果的影响。点过程数据的特殊性：在点过程数据中，点的位置是主要响应变量，而非位置上的测量值。如果点还附带标记（如物种类型或个体大小），这些标记可为模型提供额外信息。然而，点过程数据的分析需要特别注意空间分布的随机性以及潜在的聚集或分散模式。

### 从点过程数据到计数数据
在实际分析中，点数据常被聚合成网格数据，以简化分析流程。例如，通过统计网格单元内的点数，将点过程数据转换为计数数据。这种转换虽然便于计算，但会带来信息损失：协变量信息丢失：网格单元内通常只记录单一的协变量值，而忽略单元内部的协变量变化。位置信息丢失：计数的聚合抹去了点的精确位置信息，可能影响对空间模式的准确建模。尽管如此，网格化处理在数据量较大或需要降低计算复杂度时仍是一种实用方法。需要注意的是，网格划分的选择具有一定任意性，不同的网格分辨率可能导致不同的分析结果，因此应谨慎选择网格大小并评估其对结果的敏感性。

## 贝叶斯建模基础
inlabru的所有模型均基于贝叶斯统计框架，理解其基本原理是有效使用该工具的关键。贝叶斯方法通过结合先验知识和观测数据，生成参数的后验分布，为复杂空间模型提供了灵活且高效的推断方式。

### 贝叶斯框架的必要性
贝叶斯框架在inlabru中的应用有两个主要优势：计算效率：INLA和inlabru利用贝叶斯方法实现快速近似推断，显著优于传统的MCMC方法。模型拟合能力：贝叶斯方法在处理小样本数据或复杂模型时，能够通过先验信息提高估计的稳定性，尤其在生态数据中常见的不完全观测场景中表现优异。

### 先验：信念的量化
贝叶斯方法与频率派方法的根本区别在于对先验信息的利用：频率派方法：仅基于观测数据进行推断，假设所有可能参数值等概率。贝叶斯方法：结合先验信念和观测数据，先验以概率分布形式表达，反映参数的不确定性。数据的似然函数用于更新先验，生成后验分布。先验选择：先验的选择直接影响模型结果。对于信息匮乏的情况，应选择宽泛的先验（如均匀分布或高方差正态分布）；对于信息丰富的场景，可选择更尖锐的先验（如低方差正态分布）。先验的合理选择需要平衡主观知识和数据驱动的客观性。

### 惩罚复杂性先验 (PC-priors)
inlabru和INLA支持的惩罚复杂性先验（PC-priors）是一种遵循奥卡姆剃刀原则的先验选择方法。它通过惩罚模型复杂度，优先选择更简单的模型，除非数据提供充分证据支持复杂模型。PC-priors通过Kullback-Leibler散度量化模型与基本模型的偏差，数学上避免过拟合，同时提供可解释的先验设置。这种方法在空间建模中尤为重要，因为复杂空间模型容易因过参数化而导致不稳定。

### 贝叶斯定理与后验推断
贝叶斯定理是贝叶斯统计的核心，公式为：
$$P(\theta|data) \propto P(data|\theta) \times P(\theta)$$
其中：$P(\theta)$：先验，反映观测数据前对参数的信念。$P(data|\theta)$：似然，描述在给定参数下数据的概率分布。$P(\theta|data)$：后验，结合先验和似然的参数分布，是模型推断的主要目标。在inlabru中，后验分布的均值、标准差以及CI通常用于总结参数估计结果。贝叶斯框架允许对复杂模型（如潜在高斯模型）进行高效推断，尤其适合空间数据分析。

### 层次模型与潜在高斯模型
inlabru和INLA主要用于拟合潜在高斯模型（Latent Gaussian Models），这是一种层次贝叶斯模型，结构包括：观测层：包含观测数据及其似然函数，假设观测在给定潜在结构下独立。潜在层：由高斯随机场描述，包含固定效应（如协变量）和随机效应（如空间自相关）。超参数层：控制潜在层的参数，如方差或相关长度。潜在高斯模型的灵活性使其能够适应多种空间和时空建模场景，是inlabru的核心建模框架。

## 空间相关性建模：高斯随机场与SPDE
空间相关性是空间建模的核心问题，inlabru通过高斯随机场（GRF）和随机偏微分方程（SPDE）方法提供了高效的解决方案。

### 高斯随机场 (GRF)
高斯随机场（GRF）是一个定义在连续空间上的随机函数，其任意有限点集的联合分布为多变量正态分布。GRF通过协方差函数捕捉空间相关性，能够建模观测数据中无法通过协变量解释的空间模式。例如，在生态学中，GRF可用于描述物种分布的空间聚集效应。

### 高斯马尔可夫随机场 (GMRF)
高斯马尔可夫随机场（GMRF）是GRF的离散化形式，其精度矩阵的稀疏性决定了计算效率。稀疏的精度矩阵意味着条件独立性，显著降低了计算复杂度。inlabru利用GMRF的特性，通过INLA的快速近似方法实现高效推断。

### 随机偏微分方程 (SPDE) 方法
SPDE方法通过将连续GRF近似为GMRF，解决了连续空间建模的计算难题。Whittle-Matérn模型是SPDE的核心，其协方差函数能够描述空间相关性的平滑性和范围。SPDE方法通过在连续空间中定义模型，并利用有限元方法进行离散化，确保模型在不同网格分辨率下的一致性。这种方法特别适合处理高分辨率空间数据，避免了因网格选择不当导致的过拟合问题。

### 有限元网格：空间离散化
为实现实际计算，inlabru使用有限元网格对空间进行离散化。网格通过三角剖分构建，平衡计算精度和效率。关键注意事项包括：边界效应：通过扩展网格边界，减少边界处的偏差。分辨率选择：在感兴趣区域使用精细网格，在外围使用较粗网格以降低计算成本。海岸线处理：将复杂边界（如海岸线）纳入网格构建，确保模型的几何准确性。

## 对数高斯Cox过程 (LGCP) 及其扩展
对数高斯Cox过程（LGCP）是inlabru中用于建模空间点模式的核心方法，通过结合GRF和泊松过程实现灵活的空间建模。

### LGCP核心概念
LGCP假设泊松过程的强度函数对数服从高斯分布，模型形式为：$\log\{\lambda(s)\} = \beta_0 + \xi(s)$,其中$\lambda(s)$是空间位置$s$的强度，$\beta_0$是截距，$\xi(s)$是GRF，用于捕捉空间相关性。LGCP通过随机强度函数建模点的空间分布，适用于生态学中的物种分布或事件发生分析。

### 纳入协变量的LGCP
LGCP支持纳入协变量，扩展模型形式为：$\log\{\lambda(s)\} = \beta_0 + \sum_j \beta_j x_j(s) + \xi(s)$,协变量$x_j(s)$解释强度的部分变化，而GRF $\xi(s)$捕捉剩余的空间模式。协变量通常以函数形式指定，以适应连续空间的需求。这种模型结构允许区分已知协变量和未观测空间效应的贡献。

### 稀疏泊松过程与距离抽样
点数据常因不完全检测而形成稀疏泊松过程。inlabru通过在LGCP中加入检测概率项，建模稀疏强度：$\log\{\tilde{\lambda}(s)\} = \log\{\lambda(s)\} + \log\{p(s)\}$
例如，半正态检测函数可通过非线性项纳入模型，inlabru通过灵活的公式语法支持此类复杂关系。

### 联合建模：标记点模式与多似然
inlabru支持联合建模多个响应变量，例如点位置和标记（如物种类型或生物量）。通过共享潜在GRF，多似然模型能够捕捉不同响应之间的依赖性。例如，在雨林碳储存研究中，可同时建模树木位置和生物量，增强模型的解释力。

### 时空建模
时空建模在inlabru中通过扩展LGCP实现，支持时间依赖性和动态空间结构。例如，通过group和control.group参数指定时间效应（如AR(1)模型），建模物种分布随时间的变化。时空模型的复杂性要求更高的计算资源，但inlabru的灵活语法使其实现相对简便。

## inlabru语法与实践
inlabru通过简洁的语法和强大的功能，极大简化了贝叶斯空间模型的拟合和预测。

### 基本模型拟合：bru()
bru()函数是inlabru的核心，用于拟合广义线性模型和随机效应模型。其语法类似于R的glm()，但更灵活。例如，高斯回归模型的代码如下：

```{r}
# 加载示例数据
data(mtcars)

# 创建标准化的解释变量
mtcars$cc_std <- scale(mtcars$disp)[,1]  # 使用 disp 作为引擎排量的代理变量

# 拟合固定效应模型
formula_fixed <- mpg ~ cc_std
fixed_model <- inla(formula_fixed, data = mtcars, 
                   family = "gaussian",
                   control.predictor = list(compute = TRUE),control.compute = list(waic = TRUE))

# 提取 WAIC（广义信息准则）
waic_fixed <- fixed_model$waic$waic
cat("固定效应模型 WAIC:", waic_fixed, "\n")

# 展示固定效应参数
fixed_params <- summary(fixed_model)$fixed
kable(fixed_params, 
      caption = "固定效应模型参数估计结果",
      digits = 4)
```

### 随机截距模型（iid）
随机截距模型通过f()函数指定，例如：
```{r}
# 为演示目的，创建分组变量
mtcars$car_group <- factor(rep(1:8, length.out = nrow(mtcars)))

# 拟合随机截距模型
formula_random <- mpg ~ cc_std + f(car_group, model = "iid")
random_model <- inla(formula_random,  data = mtcars, family = "gaussian",
                    control.predictor = list(compute = TRUE),control.compute = list(waic = TRUE))

# 提取模型参数
random_fixed <- summary(random_model)$fixed
random_hyper <- summary(random_model)$hyperpar

# 展示结果
cat("随机截距模型结果：\n")
kable(random_fixed, caption = "固定效应参数", digits = 4)
kable(random_hyper, caption = "超参数（随机效应方差）", digits = 4)
```

### 一阶随机游走模型（rw1）
一阶随机游走模型适用于时间序列数据，代码如下：
```{r}
# 为演示创建时间变量
mtcars$time_index <- 1:nrow(mtcars)

# 拟合 rw1 模型，注意设置合适的先验
formula_rw1 <- mpg ~ cc_std + 
               f(time_index, 
                 model = "rw1",
                 hyper = list(prec = list(prior = "pc.prec", 
                                         param = c(1, 0.01))))

rw1_model <- inla(formula_rw1, 
                  data = mtcars, 
                  family = "gaussian",
                  control.predictor = list(compute = TRUE))

# 查看模型摘要
summary(rw1_model)
```

### 数据预处理与标准化
标准化是模型拟合的重要步骤，代码如下：
```{r}
# 标准化连续变量
standardize_variable <- function(x) {
  return(scale(x)[,1])
}

# 应用标准化
mtcars$mpg_std <- standardize_variable(mtcars$mpg)
mtcars$hp_std <- standardize_variable(mtcars$hp)
```

### LGCP模型拟合：lgcp()
lgcp()函数专为点过程模型设计，响应变量通过coordinates指定，samplers参数定义观测区域。非线性公式需显式指定以处理复杂关系。

### 预测功能
inlabru的predict()函数支持灵活的预测，包括自然尺度、线性预测器尺度以及区域丰度估算。ipoints()函数可用于计算加权积分点，评估总点数或个体数。

## 模型评估与选择
模型评估和选择是贝叶斯空间建模的关键步骤，确保模型的预测能力和解释力。

### 模型选择的通用建议
DIC和WAIC：虽然INLA提供DIC和WAIC指标，但在复杂空间模型中的解释力有限，建议谨慎使用。
网格一致性：比较模型时，应保持网格分辨率一致，避免因网格差异影响结果。
逐步建模：先拟合无空间效应的模型，筛选显著协变量，再加入空间效应。

### 地理参考数据评估
对于地理参考数据，可通过条件预测序数（CPO）和概率积分变换（PIT）评估模型：CPO：衡量移除单个观测后的预测能力。PIT：检查预测分布的均匀性，评估偏差和不确定性。Log-CPO得分：提供严格的交叉验证评分，鼓励适当的不确定性量化。

### 点过程模型评估
点过程模型的评估需通过汇总特征（如Ripley’s K函数、Besag’s L函数）比较观测模式与模拟模式。注意边缘效应和稀疏模式的局限性，确保评估方法的适用性。

## inlabru的演进与展望

### 软件历史与生态系统
inlabru是INLA生态系统的重要组成部分，其发展历程包括：GMRFLib（2000年代初）：高效的GMRF计算库。inla（2000年代中后期）：INLA核心程序。INLA（R包，2000年代后期）：R接口，2010-2011年加入SPDE支持。inlabru（2015-2017）：增强模型指定接口，2018-2022年支持新空间数据格式。
相关包如rSPDE、INLAspacetime等进一步扩展了功能。

### 未来方向
inlabru致力于简化模型指定、扩展模型功能并确保模块互操作性。未来发展包括：增强测试和bug修复。优化后端代码，支持广义似然和稀疏点模式建模。开发多物种密度建模和栖息地偏好分析方法。
inlabru通过贝叶斯框架和INLA的高效推断，继续推动空间和时空建模的发展。

##  空间统计分析

### 空间自相关检验

空间自相关是空间数据分析的核心概念，需要在建模前进行检验。

#### 皮尔逊残差计算

```{r}
# 假设我们有空间坐标数据
# 为演示目的，创建模拟空间数据
set.seed(123)
spatial_data <- data.frame(
  x = runif(50, 0, 10),
  y = runif(50, 0, 10),
  observed = rnorm(50, 5, 2)
)

# 拟合简单模型获取残差
simple_model <- lm(observed ~ x + y, data = spatial_data)
spatial_data$fitted <- fitted(simple_model)
spatial_data$residuals <- residuals(simple_model)

# 计算皮尔逊残差
spatial_data$pearson_residuals <- spatial_data$residuals / 
                                  sqrt(var(spatial_data$fitted))
```

#### 变差图分析

```{r}
# 创建空间对象
coordinates(spatial_data) <- ~x+y

# 计算并绘制变差图
v <- variogram(pearson_residuals ~ 1, spatial_data)
plot(v, main = "皮尔逊残差的变差图")

# 拟合理论变差图模型
v_fit <- fit.variogram(v, model = vgm("Sph"))
plot(v, v_fit, main = "拟合的变差图模型")
```

###  SPDE 模型构建

随机偏微分方程（SPDE）模型是 INLA 处理空间数据的核心方法。

#### 网格创建

```{r}
# 提取坐标
coords <- as.matrix(spatial_data@coords)

# 创建粗糙网格（适用于探索性分析）
mesh_coarse <- inla.mesh.2d(
  loc = coords, 
  max.edge = c(2, 4),    # 内部和边界的最大边长
  cutoff = 0.5           # 最小距离阈值
)

# 创建精细网格（适用于详细分析）
mesh_fine <- inla.mesh.2d(
  loc = coords, 
  max.edge = c(1, 2), 
  cutoff = 0.2
)

# 可视化网格
plot(mesh_coarse, main = "粗糙网格")
points(coords, col = "red", pch = 16)
```

#### SPDE 模型定义

```{r}
# 定义 SPDE 模型
spde <- inla.spde2.pcmatern(
  mesh = mesh_coarse,
  prior.range = c(5, 0.5),    # 范围参数：P(range < 5) = 0.5
  prior.sigma = c(2, 0.5)     # 标准差参数：P(sigma > 2) = 0.5
)
```

#### 使用 inlabru 拟合空间模型

```{r}
# 转换为 data.frame 格式
spatial_df <- as.data.frame(spatial_data)

# 定义模型组件
components <- observed ~ Intercept(1) + 
               xcoord(main = x, model = "linear") + 
               ycoord(main = y, model = "linear") +
               spatial_field(main = coordinates, model = spde)

# 拟合模型
spatial_model <- bru(
  components = components,
  data = spatial_df,
  family = "gaussian",
  options = list(control.compute = list(waic = TRUE))
)

# 查看模型摘要
summary(spatial_model)
```

##  模型评估与诊断

###  模型性能评估

```{r}
# 计算预测值
predictions <- predict(spatial_model, 
                      newdata = spatial_df, 
                      formula = ~ Intercept + xcoord + ycoord + spatial_field)

# 计算评估指标
mse <- mean((spatial_df$observed - predictions$mean)^2)
mae <- mean(abs(spatial_df$observed - predictions$mean))
rmse <- sqrt(mse)
```

### 残差诊断

```{r}
# 标准化残差
residuals_std <- (spatial_df$observed - predictions$mean) / 
                 (predictions$sd)

# 绘制残差图
par(mfrow = c(2, 2))

# Q-Q 图
qqnorm(residuals_std, main = "标准化残差 Q-Q 图")
qqline(residuals_std, col = "red")

# 残差 vs 拟合值
plot(predictions$mean, residuals_std, 
     xlab = "拟合值", ylab = "标准化残差",
     main = "残差 vs 拟合值图")
abline(h = 0, col = "red", lty = 2)

# 残差直方图
hist(residuals_std, breaks = 10, 
     main = "标准化残差分布", 
     xlab = "标准化残差",
     col = "lightblue")

# 空间残差图
plot(spatial_df$x, spatial_df$y, 
     col = ifelse(residuals_std > 0, "red", "blue"),
     cex = abs(residuals_std),
     main = "空间残差分布",
     xlab = "X 坐标", ylab = "Y 坐标")
legend("topright", c("正残差", "负残差"), 
       col = c("red", "blue"), pch = 1)

par(mfrow = c(1, 1))
```

### 模型比较

```{r}
# 比较不同模型的性能
models_comparison <- data.frame(
  Model = c("固定效应", "随机截距", "空间模型"),
  WAIC = c(fixed_model$waic$waic, 
           random_model$waic$waic, 
           spatial_model$waic$waic),
  stringsAsFactors = FALSE
)

# 计算 WAIC 差值
models_comparison$Delta_WAIC <- models_comparison$WAIC - min(models_comparison$WAIC)

# 展示比较结果
kable(models_comparison, 
      caption = "模型比较结果（WAIC 越小越好）",
      digits = 2)

# 可视化比较
barplot(models_comparison$WAIC, 
        names.arg = models_comparison$Model,
        main = "不同模型的 WAIC 比较",
        ylab = "WAIC 值",
        col = c("skyblue", "lightgreen", "orange"))
```

##  结果可视化

###  空间效应可视化

```{r}
# 提取空间随机效应
spatial_effect <- spatial_model$summary.random$spatial_field

# 创建预测网格
x_seq <- seq(min(spatial_df$x), max(spatial_df$x), length.out = 30)
y_seq <- seq(min(spatial_df$y), max(spatial_df$y), length.out = 30)
pred_grid <- expand.grid(x = x_seq, y = y_seq)

# 在网格上进行预测
grid_predictions <- predict(spatial_model,
                           newdata = pred_grid,
                           formula = ~ spatial_field)

# 创建空间效应热力图
pred_grid$spatial_effect <- grid_predictions$mean

ggplot() +
  geom_tile(data = pred_grid, aes(x = x, y = y, fill = spatial_effect)) +
  geom_point(data = spatial_df, aes(x = x, y = y), 
             color = "white", size = 2) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red",
                       midpoint = 0, name = "空间效应") +
  labs(title = "空间随机效应分布图",
       x = "X 坐标", y = "Y 坐标") +
  theme_minimal() +
  coord_equal()
```

###  预测不确定性可视化

```{r}
# 预测标准差可视化
pred_grid$pred_sd <- grid_predictions$sd

ggplot() +
  geom_tile(data = pred_grid, aes(x = x, y = y, fill = pred_sd)) +
  geom_point(data = spatial_df, aes(x = x, y = y), 
             color = "black", size = 1.5) +
  scale_fill_viridis_c(name = "预测标准差") +
  labs(title = "预测不确定性分布图",
       x = "X 坐标", y = "Y 坐标") +
  theme_minimal() +
  coord_equal()
```


## 常见问题与解决方案

###  计算问题

问题1：模型拟合时出现 "no fitted values" 错误

```{r}
#| echo: true
#| eval: false
# 解决方案：在 inla() 函数中设置 control.predictor
model <- inla(formula, 
              data = data, 
              family = "gaussian",
              control.predictor = list(compute = TRUE))
```

问题2：网格创建过于复杂导致计算缓慢

```{r}
#| echo: true
#| eval: false
# 解决方案：调整网格参数
# 增大 max.edge 和 cutoff 以减少网格复杂度
mesh_simple <- inla.mesh.2d(
  loc = coords, 
  max.edge = c(5, 10),  # 增大边长
  cutoff = 1.0          # 增大截止距离
)
```

### 模型收敛问题

```{r}
#| echo: true
#| eval: false
# 检查模型收敛性
check_convergence <- function(model) {
  # 检查固定效应的 KLD
  fixed_kld <- model$summary.fixed$kld
  if(any(fixed_kld > 0.1)) {
    warning("固定效应可能存在收敛问题")
  }

  # 检查超参数的边际似然
  marginal_loglik <- model$mlik
  cat("边际对数似然:", marginal_loglik[1], "\n")

  return(list(fixed_kld = fixed_kld, 
              marginal_loglik = marginal_loglik))
}

# 使用示例
convergence_check <- check_convergence(spatial_model)
```

### 先验选择指导

```{r}
#| echo: true
#| eval: false
#| 
# 查看可用的先验分布
inla.doc("pc.prec")  # PC 先验文档

# 先验敏感性分析示例
prior_sensitivity <- function(data, range_params, sigma_params) {
  results <- list()

  for(i in seq_along(range_params)) {
    spde_temp <- inla.spde2.pcmatern(
      mesh = mesh_coarse,
      prior.range = range_params[[i]],
      prior.sigma = sigma_params[[i]]
    )
  
    # 拟合模型（这里简化，实际使用时需要完整的模型定义）
    # model_temp <- bru(components, data, family = "gaussian")
    # results[[i]] <- model_temp$waic$waic
  }

  return(results)
}
```

##  高级应用案例

###  时空模型

```{r}
#| echo: true
#| eval: false
#| 
# 创建时空数据示例
set.seed(42)
spacetime_data <- expand.grid(
  x = seq(0, 10, by = 2),
  y = seq(0, 10, by = 2),
  time = 1:5
)
spacetime_data$observed <- rnorm(nrow(spacetime_data), 
                                mean = 5 + 0.1 * spacetime_data$time, 
                                sd = 1)

# 定义时空模型组件
components_st <- ~ Intercept(1) +
                  time_trend(main = time, model = "rw1") +
                  spatial_field(main = cbind(x, y), model = spde) +
                  spacetime_interaction(main = list(cbind(x, y), time), 
                                      model = inla.spde2.pcmatern(mesh_coarse))

# 注意：完整的时空模型实现较为复杂，这里提供框架
```

### 非高斯响应变量

```{r}
#| echo: true
#| eval: false
# 泊松回归示例
count_data <- spatial_df
count_data$counts <- rpois(nrow(count_data), lambda = exp(1 + 0.1 * count_data$x))

# 定义泊松模型
components_poisson <- ~ Intercept(1) +
                       xcoord(main = x, model = "linear") +
                       spatial_field(main = cbind(x, y), model = spde)

poisson_model <- bru(
  components = components_poisson,
  data = count_data,
  family = "poisson",
  E = rep(1, nrow(count_data))  # 暴露量
)
```

### 计算效率优化

```{r}
# 设置 INLA 计算选项以提高效率
inla.setOption(num.threads = "1:1")  # 设置线程数
inla.setOption(smtp = "taucs")       # 设置稀疏矩阵求解器

# 对于大数据集，考虑使用近似方法
control.inla <- list(
  strategy = "adaptive",    # 自适应策略
  int.strategy = "eb"       # 经验贝叶斯积分策略
)
```

### 结果报告

```{r}
#| echo: true
#| eval: false
# 创建标准化的结果报告
create_model_report <- function(model, model_name) {
  cat("=== ", model_name, " 模型报告 ===\n")
  cat("WAIC:", model$waic$waic, "\n")
  cat("计算时间:", model$cpu.used[4], "秒\n")

  if("fixed" %in% names(model$summary)) {
    cat("\n固定效应:\n")
    print(kable(model$summary.fixed, digits = 4))
  }

  if("hyperpar" %in% names(model$summary)) {
    cat("\n超参数:\n")
    print(kable(model$summary.hyperpar, digits = 4))
  }

  cat("\n" , rep("=", 40), "\n")
}

# 使用示例
# create_model_report(spatial_model, "空间随机效应模型")
```
